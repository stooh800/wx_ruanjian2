<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.fuck</groupId>
    <artifactId>wx_ruanjian2</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <artifactId>subscribe</artifactId>
  <dependencies>
  <dependency>
	    <groupId>${project.groupId}</groupId>
	    <artifactId>commons</artifactId>
	    <version>${project.version}</version>
	</dependency>
	<!-- JAXB的API，一般引入Spring、JPA相关的依赖以后，往往都会有 -->
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
		</dependency>
		<!-- JAXB的核心库 -->
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-core</artifactId>
			<version>2.3.0.1</version>
			<scope>runtime</scope>
		</dependency>
		<!-- JAXB的实现库 -->
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-impl</artifactId>
			<version>2.3.2</version>
			<scope>runtime</scope>
		</dependency>

		<!-- 使用Jackson来转换XML和Java对象，企业使用较多，因为它跟Spring生态结合非常紧密 -->
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
		</dependency>
	
		<!-- 用于访问关系数据库，不需要写SQL语句、不要自己创建数据库表、能够自动根据接口的方法名称生成查询语句 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		
		<!-- 用于访问Redis数据库 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		
		<!-- 开发者工具，用于实现热部署，在修改文件以后马上能够生效 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
		</dependency>
		
		<!-- 数据库驱动 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<!-- 单元测试支持 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
		
			<!-- Spring Boot提供的打包插件，能够在把项目打包的时候，自动把依赖的jar文件一并打包 -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
				<!-- 可以打包一个可执行jar -->
				<executable>true</executable>
				<!-- 创建一个子进程去执行，此时可以使用，mvn spring-boot:start启动 -->
				<fork>true</fork>
				<!-- 注意：这种启动和停止，都需要借助一个JMX端口，每个模块的JMX端口号必须不同-->
				<!-- 默认端口号是9001，建议每100个端口作为一段端口号分配给一个人使用 -->
				<jmxPort>11113</jmxPort>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>